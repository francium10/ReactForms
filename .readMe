# React Form Component

A beautiful, responsive form component built with React and styled using Tailwind CSS. This form provides a modern user interface for collecting user information with complete state management, form validation, and accessibility features.

## Features

- **Responsive Design**: Adapts to different screen sizes with mobile-first approach
- **Modern UI**: Clean, professional design with gradient background and card layout
- **State Management**: Complete form state handling with React hooks
- **Form Validation**: HTML5 validation with required field indicators
- **Interactive Elements**: Smooth focus states and hover effects
- **Accessibility**: Proper labeling and keyboard navigation support
- **File Upload**: Supports resume uploads with PDF, DOC, and DOCX formats
- **Form Submission**: Handles form submission with preventDefault
- **Reset Functionality**: Complete form reset with custom handler

## Implementation Details

### State Management
The form uses React's `useState` hook to manage form data:

```javascript
const [value, setValue] = useState({
  firstname: "",
  lastname: "",
  email: "",
  contact: "",
  gender: "",
  country: "country",
  resume: null,
  url: "",
  about: "",
});
```

### Event Handlers
- **handleChange**: Updates form state when input values change
- **handleSubmit**: Prevents default form submission and logs form data
- **handleReset**: Resets all form fields to initial values

### Form Validation
All fields are marked as required using HTML5 validation:
- Client-side validation with `required` attribute
- Proper input types for email and URL validation
- File type restrictions for resume uploads

## Code Structure

```javascript
import { useState } from "react";

const Form = () => {
  // State management
  const [value, setValue] = useState({...});
  
  // Event handlers
  const handleChange = (e) => {...};
  const handleSubmit = (e) => {...};
  const handleReset = () => {...};
  
  // JSX render
  return (...);
};
```

## Form Fields

The form includes the following input fields with controlled components:

1. **First Name** (required) - Text input with value binding
2. **Last Name** (required) - Text input with value binding
3. **Email** (required) - Email input with HTML5 validation
4. **Contact** (required) - Phone number text input
5. **Gender** (required) - Radio button selection (Male/Female/Other)
6. **Country** (required) - Dropdown selection (India/USA/UK)
7. **Resume** (required) - File upload (.pdf, .doc, .docx)
8. **URL** (required) - URL input with HTML5 validation
9. **About** (required) - Textarea for personal description

## Requirements

### Dependencies
- React 16.8+ (for hooks support)
- Tailwind CSS (for styling)

### Installation
```bash
npm install react
npm install -D tailwindcss
```

### Tailwind CSS Setup
Ensure Tailwind CSS is properly configured in your project:

1. Install Tailwind CSS:
```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

2. Configure `tailwind.config.js`:
```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

3. Add Tailwind directives to your CSS file:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

## Usage

```jsx
import { useState } from "react";
import Form from './components/Form';

function App() {
  return (
    <div className="App">
      <Form />
    </div>
  );
}
```

### Form Submission
The form currently logs form data to the console. To handle form submission:

```javascript
const handleSubmit = (e) => {
  e.preventDefault();
  console.log(value); // Form data object
  // Add your submission logic here
  // Example: API call, validation, etc.
};
```

### Form Reset
The reset functionality clears all form fields:

```javascript
const handleReset = () => {
  setValue({
    firstname: "",
    lastname: "",
    email: "",
    contact: "",
    gender: "",
    country: "country",
    resume: null,
    url: "",
    about: "",
  });
};
```

## Styling

The component uses Tailwind CSS classes for styling:
- **Color Scheme**: Blue and gray palette
- **Layout**: Responsive grid with proper spacing
- **Interactive States**: Focus rings and hover effects
- **Typography**: Clean, readable font hierarchy

## Customization

### Colors
To change the color scheme, modify these Tailwind classes:
- `bg-blue-600` - Primary button background
- `focus:ring-blue-500` - Focus ring color
- `from-blue-50 to-indigo-100` - Gradient background

### Layout
- Adjust `max-w-2xl` for form width
- Modify `space-y-6` for field spacing
- Change `grid-cols-1 md:grid-cols-2` for responsive behavior

### Custom Validation
To add custom validation beyond HTML5:

```javascript
const [errors, setErrors] = useState({});

const validateForm = () => {
  const newErrors = {};
  
  if (!value.firstname.trim()) {
    newErrors.firstname = "First name is required";
  }
  
  if (!value.email.includes('@')) {
    newErrors.email = "Please enter a valid email";
  }
  
  setErrors(newErrors);
  return Object.keys(newErrors).length === 0;
};

const handleSubmit = (e) => {
  e.preventDefault();
  if (validateForm()) {
    console.log(value);
    // Submit form
  }
};
```

## Browser Support

- Chrome (latest)
- Firefox (latest)
- Safari (latest)
- Edge (latest)

## Future Enhancements

- [x] Form state management
- [x] Form submission handling  
- [x] Form reset functionality
- [ ] Custom validation messages
- [ ] Loading states during submission
- [ ] Success/error feedback notifications
- [ ] Form data persistence
- [ ] Multi-step form support
- [ ] Dark mode support
- [ ] Form field animations
- [ ] File upload progress indicators

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

This project is open source and available under the [MIT License](LICENSE).